AWSTemplateFormatVersion: "2010-09-09"
Description: This template is to build website infra with high security, high availability and Scaling

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Web Autoscaling Group Configuration"
        Parameters:
          - WebAsgMax
          - WebAsgMin
          - WebAsgDesired
    ParameterLabels:
      WebAsgMax:
        default: "Maximum Instances in Autoscaling Group"
      WebAsgMin:
        default: "Minimum Instances in Autoscaling Group"
      WebAsgDesired:
        default: "Desired Instances in Autoscaling Group"
    Description: |
      This CloudFormation Template (CFT) is designed to create a high-availability and secure website environment.
      Key components include:
      - VPC with private and public subnets across multiple availability zones.
      - Autoscaling group of EC2 instances for the website backend.
      - Load Balancer with Route 53 record setup for the domain.
      - NAT Gateway for internet access for private subnets.
      - Security groups, IAM roles, and other resources for security and access control.
      

Mappings:
# Mapping for Region-specific AMI IDs
  RegionMap:
    us-east-1:
      AMI: ami-0ddc798b3f1a5117e
      InstanceType: t2.micro

    ap-southeast-1:
      AMI: ami-0ef1a6822965893ba
      InstanceType: t2.micro
      
    ca-central-1:
      AMI: ami-074c42dd5ddb28c14
      InstanceType: t2.micro
      
    ap-south-1:
      AMI: ami-0e0e417dfa2028266
      InstanceType: t2.micro
      
    ap-south-2:
      AMI: ami-0a74efd95b7028f59
      InstanceType: t3.micro    
      

Parameters:
  WebAsgMax:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 3
    Description: Specifies the maximum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 3
    Description: Specifies the minimum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgDesired:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 3
    Description: Specifies the Desired of EC2 instances in the Web Autoscaling Group.
    Type: String




Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/22
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MDR-VPC
# create 3 Private Subnets
#****************************************
# First Private Subnet
  MDRPrivSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/25
      AvailabilityZone: !Select [0,!GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MDR-Priv-subnet1
          
# Second Private Subnet

  MDRPrivSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.128/25
      AvailabilityZone: !Select [1,!GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MDR-Priv-subnet2


# Third Private Subnet

  MDRPrivSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/25
      AvailabilityZone: !Select [2,!GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MDR-Priv-subnet3
          

# create 3 Public Subnets
#****************************************
# First Public Subnet
  MDRPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/25
      AvailabilityZone: !Select [0,!GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MDR-Pub-subnet1
          
# Second Public Subnet

  MDRPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.128/25
      AvailabilityZone: !Select [1,!GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MDR-Pub-subnet2


# Third Public Subnet

  MDRPublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [2,!GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MDR-Pub-subnet3

# Create Internet Gateway and attach it to the VPC
#**************************************************

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MDR-IGW
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# Create Public and Private Route Tables
#****************************************

# Public Route Tables
  MDRRTPub:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MDR-RT-Pub
  

  # Private Route Tables
  MDRRTPriv:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MDR-RT-Priv
# Setup public routes and assign public subnets to the Route Table
#******************************************************************
# Crate Public Route in the Public Route table

  MDRRTPubDefaultIPv4:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: MDRRTPub
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway     
        

# Assign Public subnets to the Route table        
  MDRRTAssociationPub1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MDRPublicSubnet1
      RouteTableId:
        Ref: MDRRTPub 

  MDRRTAssociationPub2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MDRPublicSubnet2
      RouteTableId:
        Ref: MDRRTPub           
          
  MDRRTAssociationPub3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MDRPublicSubnet3
      RouteTableId:
        Ref: MDRRTPub 

# Setup Assign Private Subnets to the Route tables
#*******************************************************

# Assign Private subnets to the Route table 

  MDRRTPubDefaultIPv5:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: MDRRTPriv
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway    


  MDRRTAssociationPriv1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MDRPrivSubnet1
      RouteTableId:
        Ref: MDRRTPriv 

  MDRRTAssociationPriv2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MDRPrivSubnet2
      RouteTableId:
        Ref: MDRRTPriv           
          
  MDRRTAssociationPriv3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MDRPrivSubnet3
      RouteTableId:
        Ref: MDRRTPriv

# Create Security Group

  MDRSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access HTTP
      Tags:
        - Key: Name
          Value: MDR-SG
      SecurityGroupIngress:
        - Description: 'Allow HTTP Ports'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          Cidrip: '0.0.0.0/0'
        - Description: 'Allow SSH Ports'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          Cidrip: '0.0.0.0/0'


# Create Instance profile and add the role the to profile
# 'MyAdminRole' --> 'Service or use case -- EC2' permissions --> Administrator access
# Create IAM Role

  MyAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyAdminRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AdminAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'


  MyIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: MyAdminRole  # Ensure MyAdminRole is created first
    Properties:
      InstanceProfileName: MyIamInstanceProfile
      Path: "/"
      Roles:
        - !Ref MyAdminRole



#*******************************************************
#Create Launch Template
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt
            - MyIamInstanceProfile
            - Arn
        DisableApiTermination: false
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: !FindInMap [RegionMap, !Ref "AWS::Region", InstanceType]
        #KeyName: MDR-kp-dotnet
        SecurityGroupIds:
          - !Ref MDRSG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y httpd git
            sudo systemctl start httpd
            sudo systemctl enable httpd
            git clone https://github.com/MDinesh28/amazon-clone.git
            cp -r amazon-clone/* /var/www/html

#Create Auto Scaling Group

  ASG: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      VPCZoneIdentifier:
        - !Ref MDRPrivSubnet1
        - !Ref MDRPrivSubnet2
        - !Ref MDRPrivSubnet3
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: "1"
      MaxSize: !Ref WebAsgMax
      MinSize: !Ref WebAsgMin
      DesiredCapacity: !Ref WebAsgDesired
      Tags:
        - Key: "Name"
          Value: "Web"
          PropagateAtLaunch: true
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref ALBTG              


# Create Target Group

  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /index.html
      HealthCheckTimeoutSeconds: 5
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: stickiness.enabled 
          Value: false


# Create Load balancer

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: "ipv4"
      Scheme: "internet-facing"
      SecurityGroups: 
        - !Ref MDRSG
      Subnets: 
        - !Ref MDRPublicSubnet1
        - !Ref MDRPublicSubnet2
        - !Ref MDRPublicSubnet3
      Tags: 
        - Key: Name
          Value: !Join [ '', [ 'ALB-', !Ref 'AWS::StackName' ] ]
      Type: "application"          

# Create Listner

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP